name: Development

on:
  push:
    branches:
      - '*'
      - '!main'
  pull_request:
    types:
      - opened
      - reopened

permissions:
  packages: write
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        name: Checkout repo

      - name: Create and populate .env file
        run: |
          echo "GITHUB_PACKAGES_ORGANIZATION=Tycho-SHM" >> .env
          echo "GITHUB_PACKAGES_USERNAME=Tycho-SHM" >> .env
          echo "GITHUB_PACKAGES_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> .env

      - name: Docker compose build
        run: |
          docker compose --profile all --profile testing build
          mkdir dockerimages
          docker save tycho-shm/notificationservice -o ./dockerimages/notificationservice.tar
          docker save tycho-shm/taskservice -o ./dockerimages/taskservice.tar
          docker save tycho-shm/apigateway -o ./dockerimages/apigateway.tar
          docker save tycho-shm/profileservice -o ./dockerimages/profileservice.tar
          docker save tycho-shm/e2etesting -o ./dockerimages/e2etesting.tar

#      - name: Upload Docker images as artifact
#        uses: actions/upload-artifact@v4
#        with:
#          name: docker-images
#          path: ./dockerimages/
#
#  test:
#    runs-on: ubuntu-latest
#    needs: build
#
#    steps:
#      - uses: actions/checkout@v4
#        name: Checkout docker compose file
#        with:
#          sparse-checkout: |
#            docker-compose.yml
#            ocelot.json
#          sparse-checkout-cone-mode: false
#
#      - name: Create docker images folder
#        run: |
#          docker images
#          mkdir dockerimages
#
#      - name: Download Docker images artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: docker-images
#          path: ./dockerimages/
#
#      - name: Load Docker images
#        run: |
#          docker load -i ./dockerimages/notificationservice.tar
#          docker load -i ./dockerimages/taskservice.tar
#          docker load -i ./dockerimages/apigateway.tar
#          docker load -i ./dockerimages/profileservice.tar
#          docker load -i ./dockerimages/e2etesting.tar
#          docker images

      - name: Create and populate .env file
        run: |
          echo "RABBITMQ_HOSTNAME=rabbitmq" >> .env
          echo "RABBITMQ_USERNAME=guest" >> .env
          echo "RABBITMQ_PASSWORD=guest" >> .env
          echo "PROFILESERVICEDB_CONNECTIONSTRING=mongodb://admin:admin@mongodb:27017" >> .env
          echo "PROFILESERVICEDB_DATABASE=shm_profileservice" >> .env
          echo "PROFILESERVICEDB_HOUSEPROFILECOLLECTION=houseprofiles" >> .env
          echo "PROFILESERVICEDB_USERPROFILECOLLECTION=userprofiles" >> .env
          echo "CLERK_DOMAIN=https://pure-catfish-87.clerk.accounts.dev" >> .env
          echo "CLERK_DOMAIN=${{ secrets.CLERK_DOMAIN }}" >> .env
          echo "TEST_CLERKAPISECRET=${{ secrets.TEST_CLERKAPISECRET }}" >> .env
          echo "TEST_APIGATEWAYURL=http://shm-apigateway:8080" >> .env
          echo "TEST_SVIXAUTHTOKEN=${{ secrets.TEST_SVIXAUTHTOKEN }}" >> .env
          echo "TEST_SVIXAPIRUL=${{ secrets.TEST_SVIXAPIRUL }}" >> .env

      - name: run docker containers
        run: |
          docker compose --profile all --profile testing up --abort-on-container-exit e2etesting

      - name: Parse Trx files
        uses: NasAmin/trx-parser@v0.6.0
        id: trx-parser
        with:
          TRX_PATH: ${{ github.workspace }}/dockerdata/e2etesting/testresults #This should be the path to your TRX files
          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    runs-on: ubuntu-latest
    needs:
      - build-test
#      - test
    if: ${{ always() }}

    steps:
      - uses: geekyeggo/delete-artifact@v5
        name: Cleanup artifacts
        with:
          name: |
            docker-images